{"version":3,"file":"ohif-extensions_ohif-extension-webquiz_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAKA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AAKA;AAKA;AACA;AAIA;AAIA;AAIA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAxMA;AAKA;AAAA;AAsMA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3NA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA","sources":["file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5CCreateCustomIcon.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5CQuestions%5CbtnComponent.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5CWebQuizSidePanelComponent.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5Cid.js","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Csrc%5Cindex.tsx","file:///D:%5CUsers%5Ccjohnson%5CGitRepositories%5COHIF-Viewer-Dev%5Cohif-extensions%5Cohif-extension-webquiz%5Cassets%5CBainesTransparentTiny.png"],"sourcesContent":["\r\nimport React from 'react';\r\nimport baineslogo from '../assets/BainesTransparentTiny.png';\r\n\r\ntype ImageIconProps = React.ImgHTMLAttributes<HTMLImageElement>;\r\n\r\n\r\nconst CreateCustomIcon = (Icons) => {\r\n//   console.log('ðŸ“¦ Icons keys:', Object.keys(Icons));   // for debug\r\n\r\n  const BaineslogoIcon = (props: ImageIconProps) => {\r\n    const { width = 22, height = 22, ...rest } = props;\r\n    return <img src={baineslogo} width={width} height={height} {...rest} />;\r\n  };\r\n\r\n  Icons.addIcon('baines-logo', BaineslogoIcon);\r\n\r\n};\r\n\r\nexport default CreateCustomIcon;\r\n","import React from \"react\";\r\nimport { Button } from '@ohif/ui-next';\r\n\r\n\r\nfunction BtnComponent( { measurementData, segmentationData, refreshData, setIsSaved }) {\r\n\r\n  const handleButtonClick = () => {\r\n\r\n    // refresh the annotation data before posting\r\n    // segmentation data is refreshed automatically through segmentation service\r\n    const [freshMeasurementData, freshSegmentationData ] = refreshData();\r\n    console.log('Number of measurements: ', freshMeasurementData.length);\r\n    console.log(\"Number of segments:\", freshSegmentationData.length)\r\n\r\n    window.parent.postMessage({\r\n      type: 'annotations', \r\n      measurementdata: freshMeasurementData,\r\n      segmentationdata: freshSegmentationData\r\n    }, '*');\r\n    setIsSaved(true);\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <Button onClick={handleButtonClick}>Post</Button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default BtnComponent\r\n","import React, { useEffect, useState } from 'react';\r\nimport { sqrt } from 'math.js'\r\nimport BtnComponent from './Questions/btnComponent';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nimport * as cornerstone from '@cornerstonejs/core';\r\nimport * as cornerstoneTools from '@cornerstonejs/tools';\r\nimport { annotation } from '@cornerstonejs/tools';\r\n\r\n\r\n/**\r\n *  Creating a React component to be used as a side panel in OHIF.\r\n *  Also performs a simple div that uses Math.js to output the square root.\r\n */\r\n\r\n\r\nfunction WebQuizSidePanelComponent() {\r\n    // set up useEffect hook to manage gathering all data from services\r\n    //  as the other components may be updating asynchronously and this\r\n    //  component needs to be subscribed to those updates\r\n\r\n    const { servicesManager } = useSystem();\r\n    const { segmentationService } = servicesManager.services;\r\n    \r\n    const [segmentationData, setSegmentationData] = useState([]);\r\n    const [annotationData, setAnnotationData] = useState([]);\r\n    const [isSaved, setIsSaved] = useState(true);\r\n\r\n\r\n\r\n    type AnnotationStats = Record<string, Record<string, unknown>>;     // generic for capture of cachedStats object\r\n\r\n\r\n    // Annotations listeners\r\n    useEffect(() => {\r\n        const handleAnnotationChange = () => {\r\n            const lo_annotationStats = getAnnotationsStats();\r\n            setAnnotationData(lo_annotationStats);\r\n\r\n            // const lengths = lo_annotationStats.flatMap((statsObj) => \r\n            //     Object.values(statsObj)\r\n            //         .filter((stat): stat is { length: number } => typeof stat === 'object' && stat !== null && 'length' in stat)\r\n            //         .map((stat) => stat.length)\r\n            //     );\r\n\r\n            // console.log(\"LENGTHS ===>\", lengths);\r\n        } ;\r\n\r\n        // Register listeners\r\n        // cornerstone.eventTarget.addEventListener(cornerstoneTools.Enums.Events.ANNOTATION_ADDED, handleAnnotationChange);\r\n        cornerstone.eventTarget.addEventListener(cornerstoneTools.Enums.Events.ANNOTATION_MODIFIED, handleAnnotationChange);\r\n        cornerstone.eventTarget.addEventListener(cornerstoneTools.Enums.Events.ANNOTATION_REMOVED, handleAnnotationChange);\r\n        cornerstone.eventTarget.addEventListener(cornerstoneTools.Enums.Events.ANNOTATION_COMPLETED, handleAnnotationChange);\r\n\r\n\r\n        // Cleanup on unmount\r\n        return() => {\r\n            // cornerstone.eventTarget.removeEventListener(cornerstoneTools.Enums.Events.ANNOTATION_ADDED, handleAnnotationChange);\r\n            cornerstone.eventTarget.removeEventListener(cornerstoneTools.Enums.Events.ANNOTATION_MODIFIED, handleAnnotationChange);\r\n            cornerstone.eventTarget.removeEventListener(cornerstoneTools.Enums.Events.ANNOTATION_REMOVED, handleAnnotationChange);\r\n            cornerstone.eventTarget.removeEventListener(cornerstoneTools.Enums.Events.ANNOTATION_COMPLETED, handleAnnotationChange);\r\n        }\r\n    }, [] );\r\n\r\n    //=====================\r\n    // Segmentation listener\r\n\r\n\r\n    // don't rely on segmentationService. \r\n    // These useEffects are tapping into the events for a more immediate response\r\n    // useEffect(() => {\r\n    //     const lo_allVolumes = buildVolumeTable();\r\n    //     setSegmentationData(lo_allVolumes);\r\n    //     console.table(lo_allVolumes);\r\n    //     }, [segmentationService]);\r\n    // Refactored ... ===>\r\n    useEffect(() => {\r\n        const handleSegmentationChange = () => {\r\n            const lo_allVolumes = buildVolumeTable();\r\n            setSegmentationData(lo_allVolumes);\r\n            console.table(lo_allVolumes);\r\n        };\r\n\r\n        cornerstone.eventTarget.addEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_ADDED,\r\n            handleSegmentationChange\r\n        );\r\n\r\n        cornerstone.eventTarget.addEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_DELETED,\r\n            handleSegmentationChange\r\n        );\r\n\r\n        cornerstone.eventTarget.addEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_MODIFIED,\r\n            handleSegmentationChange\r\n        );\r\n\r\n        cornerstone.eventTarget.addEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_DATA_MODIFIED,\r\n            handleSegmentationChange\r\n        );\r\n\r\n        return () => {\r\n            cornerstone.eventTarget.removeEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_ADDED,\r\n            handleSegmentationChange\r\n            );\r\n            cornerstone.eventTarget.removeEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_DELETED,\r\n            handleSegmentationChange\r\n            );\r\n            cornerstone.eventTarget.removeEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_MODIFIED,\r\n            handleSegmentationChange\r\n            );\r\n            cornerstone.eventTarget.removeEventListener(\r\n            cornerstoneTools.Enums.Events.SEGMENTATION_DATA_MODIFIED,\r\n            handleSegmentationChange\r\n            );\r\n        };\r\n    }, []);\r\n\r\n    //=====================\r\n    // watch for changes to the state properties\r\n    useEffect(() => {\r\n        if (annotationData.length > 0) {\r\n            setIsSaved(false);\r\n            // console.log(' Annotation Change');\r\n        }\r\n    }, [annotationData]);\r\n\r\n    useEffect(() => {\r\n        if (segmentationData.length > 0) {\r\n            setIsSaved(false)\r\n            // console.log(' Segmentation Change');\r\n        }\r\n    }, [segmentationData]);\r\n\r\n    ////////////////////////////////////////////\r\n    //=====================\r\n    // helper functions\r\n    //=====================\r\n    ////////////////////////////////////////////\r\n\r\n    //=====================\r\n    // function to get list of all cached annotation stats\r\n    const getAnnotationsStats = (): AnnotationStats[] => {\r\n        const lo_annotationStats: AnnotationStats[] = [];\r\n        const allAnnotations = annotation.state.getAllAnnotations();\r\n\r\n        allAnnotations.forEach((ann, index) => {\r\n            const stats = ann.data?.cachedStats as AnnotationStats;\r\n            if (stats && Object.keys(stats).length > 0) {\r\n                lo_annotationStats.push(stats);\r\n                // console.log(\"ANNOTATION Tool ===>\", ` Annotation ${index}:`, ann.data.cachedStats);\r\n            }\r\n        });\r\n\r\n        return lo_annotationStats;\r\n    };\r\n\r\n    //=====================\r\n    // function to get the list of objects holding segment volume data\r\n    const buildVolumeTable = () => {\r\n    const lo_segmentations = segmentationService.getSegmentations();\r\n    const lo_allVolumes = [];\r\n\r\n    lo_segmentations.forEach((segmentation, segIndex) => {\r\n        const segments = segmentation.segments;\r\n\r\n        Object.keys(segments).forEach((segmentKey) => {\r\n        const segment = segments[segmentKey];\r\n        const volume = segment?.cachedStats?.namedStats?.volume?.value;\r\n\r\n        if (volume !== undefined) {\r\n            lo_allVolumes.push({\r\n            segmentation: segIndex + 1,\r\n            segment: segmentKey,\r\n            volume,\r\n            });\r\n        }\r\n        });\r\n    });\r\n    return lo_allVolumes;\r\n    };\r\n\r\n    //=====================\r\n    const refreshData = () => {\r\n        const lo_annotationStats = getAnnotationsStats();\r\n        setAnnotationData(lo_annotationStats);\r\n        const lo_allVolumes = buildVolumeTable();\r\n        setSegmentationData(lo_allVolumes);\r\n        console.table(lo_allVolumes);\r\n        return [lo_annotationStats, lo_allVolumes]; // ensures stats are updated before continuing\r\n    };\r\n\r\n\r\n\r\n     ////////////////////////////////////////////\r\n    //=====================\r\n    // return\r\n    //=====================\r\n    ////////////////////////////////////////////\r\n    return (\r\n        <div className=\"text-white w-full text-center\">\r\n        {`Web Quiz version : ${sqrt(4)}`}\r\n        <BtnComponent\r\n            measurementData={annotationData}\r\n            segmentationData={segmentationData}\r\n            refreshData={refreshData}\r\n            setIsSaved={setIsSaved}\r\n        />\r\n        </div>\r\n    );    \r\n\r\n}\r\n\r\n\r\nexport default WebQuizSidePanelComponent;\r\n\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { id } from './id';\r\nimport WebQuizSidePanelComponent from './WebQuizSidePanelComponent';\r\nimport CreateCustomIcon from './CreateCustomIcon';\r\nimport { Icons } from '@ohif/ui-next';\r\n\r\nCreateCustomIcon(Icons);\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nexport default {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * Perform any pre-registration tasks here. This is called before the extension\r\n   * is registered. Usually we run tasks such as: configuring the libraries\r\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\r\n   * this extension is providing.\r\n   */\r\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {},\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule: ({ servicesManager, commandsManager, extensionManager }) => {\r\n    // console.log('ðŸ§ª In Panel Module Is baines-logo in Icons?', 'baines-logo' in Icons);\r\n    return [\r\n      {\r\n        name: \"webquiz\",\r\n        iconName: 'baines-logo',\r\n        iconLabel: \"Web Quiz\",\r\n        label: \"Web Quiz\",\r\n        component: WebQuizSidePanelComponent\r\n      }\r\n    ]\r\n  },\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getViewportModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * ToolbarModule should provide a list of tool buttons that will be available in OHIF\r\n   * for Modes to consume and use in the toolbar. Each tool button is defined by\r\n   * {name, defaultComponent, clickHandler }. Examples include radioGroupIcons and\r\n   * splitButton toolButton that the default extension is providing.\r\n   */\r\n  getToolbarModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * LayoutTemplateMOdule should provide a list of layout templates that will be\r\n   * available in OHIF for Modes to consume and use to layout the viewer.\r\n   * Each layout template is defined by a { name, id, component}. Examples include\r\n   * the default layout template provided by the default extension which renders\r\n   * a Header, left and right sidebars, and a viewport section in the middle\r\n   * of the viewer.\r\n   */\r\n  getLayoutTemplateModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * HangingProtocolModule should provide a list of hanging protocols that will be\r\n   * available in OHIF for Modes to use to decide on the structure of the viewports\r\n   * and also the series that hung in the viewports. Each hanging protocol is defined by\r\n   * { name, protocols}. Examples include the default hanging protocol provided by\r\n   * the default extension that shows 2x2 viewports.\r\n   */\r\n  getHangingProtocolModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * CommandsModule should provide a list of commands that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each command is defined by\r\n   * an object of { actions, definitions, defaultContext } where actions is an\r\n   * object of functions, definitions is an object of available commands, their\r\n   * options, and defaultContext is the default context for the command to run against.\r\n   */\r\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * ContextModule should provide a list of context that will be available in OHIF\r\n   * and will be provided to the Modes. A context is a state that is shared OHIF.\r\n   * Context is defined by an object of { name, context, provider }. Examples include\r\n   * the measurementTracking context provided by the measurementTracking extension.\r\n   */\r\n  getContextModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n  /**\r\n   * DataSourceModule should provide a list of data sources to be used in OHIF.\r\n   * DataSources can be used to map the external data formats to the OHIF's\r\n   * native format. DataSources are defined by an object of { name, type, createDataSource }.\r\n   */\r\n  getDataSourcesModule: ({ servicesManager, commandsManager, extensionManager }) => {},\r\n};\r\n","export default __webpack_public_path__ + \"assets/images/BainesTransparentTiny.png\";"],"names":[],"sourceRoot":""}